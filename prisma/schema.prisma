// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                            String                     @id @default(cuid())
  firstname                     String?
  lastname                      String?
  username                      String?                    @unique
  email                         String?                    @unique
  emailVerified                 DateTime?
  password                      String
  image                         String?
  isTwoFactorEnabled            Boolean?                   @default(false)
  twoFactorConfermationCode     twoFactorConfermation?
  resetPasswordConfermationCode ResetPasswordConfermation?
  // accounts                      Account[]
  sessions                      Session[]
  roles                         UserRole[]
  isAdmin                       Boolean                    @default(false)
  // Optional for WebAuthn support
  // Authenticator                 Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  permissions String
  users       UserRole[]
}

model UserRole {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String
}


model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expiredAt DateTime
}

model twoFactorConfermation {
  id        String   @id @default(cuid())
  userId    String
  expiredAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model ResetPasswordConfermation {
  id        String   @id @default(cuid())
  userId    String
  expiredAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceName   String?
  deviceType   String?
  browser      String?
  os           String?
  createdAt    DateTime @default(now())
}
// model Account {
//   id                       String  @id @default(cuid())
//   userId                   String  @unique
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String? @db.Text
//   access_token             String? @db.Text
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String? @db.Text
//   session_state            String?
//   refresh_token_expires_in Int?
//   user                     User?   @relation(fields: [userId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }


// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }
