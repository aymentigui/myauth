// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

model user {
  id                            String                     @id @default(cuid())
  firstname                     String?
  lastname                      String?
  username                      String?                    @unique
  email                         String?                    @unique
  emailVerified                 DateTime?
  password                      String
  image                         String?
  imageCompressed               String?
  isTwoFactorEnabled            Boolean?                   @default(false)
  twoFactorConfermationCode     twofactorconfermation?
  resetPasswordConfermationCode resetpasswordconfermation?
  // accounts                      Account[]
  sessions                      session[]
  roles                         userrole[]
  isAdmin                       Boolean                    @default(false)
  // Optional for WebAuthn support
  // Authenticator                 Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Account {
//   id                       String  @id @default(cuid())
//   userId                   String  @unique
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String? @db.Text
//   access_token             String? @db.Text
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String? @db.Text
//   session_state            String?
//   refresh_token_expires_in Int?
//   user                     User?   @relation(fields: [userId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }
